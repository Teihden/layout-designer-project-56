// Media queries
@mixin media($breakpoint) {
  @media screen and (max-width: map.get($breakpoints, breakpoint-#{$breakpoint})) {
    @content;
  }
}

// Containers
@mixin flex-container(
  $row-gap: 16px,
  $column-gap: 16px,
  $align-items: flex-start,
  $justify-content: flex-start,
  $flex-direction: row,
  $flex-wrap: wrap
) {
  display: flex;
  flex-flow: $flex-direction $flex-wrap;

  justify-content: $justify-content;
  align-items: $align-items;

  gap: #{$row-gap} #{$column-gap};

  @content;
}

@mixin grid-container($track-size, $row-gap: 25px, $column-gap: 50px) {
  display: grid;
  grid-template-columns: repeat(auto-fill, $track-size);
  gap: #{$row-gap} #{$column-gap};

  @content;
}

// Margins and paddings
@mixin m-p-class($value, $class-name, $direction) {
  @if math.is-unitless($value) {
    .#{string.slice($class-name, 1, 1)}-#{string.slice($direction, 1, 1)}-#{$value} {
      #{$class-name}-#{$direction}: $value;
    }
  } @else if math.unit($value) == "px" {
    .#{string.slice($class-name, 1, 1)}-#{string.slice($direction, 1, 1)}-#{math.div($value, 1px)} {
      #{$class-name}-#{$direction}: $value;
    }
  } @else if math.unit($value) == "rem" {
    $value: math.div($value * $rem-base, 1rem);
    .#{string.slice($class-name, 1, 1)}-#{string.slice($direction, 1, 1)}-#{math.div($value, 1px)} {
      #{$class-name}-#{$direction}: $value;
    }
  }
}

// Font-sizes
@mixin f-s-class($value, $class-name) {
  .#{$class-name} {
    font-size: $value;
  }
}

// Text-color
@mixin t-class($value, $class-name) {
  .t-#{$class-name} {
    color: $value;
  }
}

// Buttons
@mixin btn-structure(
  $width: auto,
  $height: auto,
  $padding-inline: 30px,
  $padding-block: 20px
) {
  width: $width;
  height: $height;

  padding: #{$padding-block} #{$padding-inline} #{$padding-block} #{$padding-inline};
}

@mixin btn-style(
  $font-size: 12.8,
  $background-color: transparent,
  $border-width: 0,
  $border-radius: 5,
  $color: inherit,
  $text-transform: uppercase,
  $border-color: currentColor,
  $border-style: solid
) {
  border-width: #{$border-width}px;
  border-radius: #{$border-radius}px;
  border-color: $border-color;
  border-style: $border-style;

  @if math.is-unitless($font-size) {
    font-size: #{$font-size}px;
  } @else {
    font-size: #{$font-size};
  }
  color: $color;
  font-family: inherit;
  text-transform: $text-transform;
  text-decoration: none;

  background-color: $background-color;
}

// Backgrounds
@mixin bg-class($value, $class-name) {
  .bg-#{$class-name} {
    background-color: $value;
  }
}
